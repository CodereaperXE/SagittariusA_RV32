$date
	Mon Jul 28 13:29:17 2025
$end
$version
	Icarus Verilog
$end
$timescale
	10ps
$end
$scope module main $end
$var wire 1 ! nclk $end
$var wire 1 " zero $end
$var wire 7 # opcode [6:0] $end
$var wire 1 $ mem_op_r $end
$var wire 32 % ir_reg_out [31:0] $end
$var wire 8 & func7 [31:24] $end
$var wire 3 ' func3 [14:12] $end
$var wire 4 ( alu_sel [3:0] $end
$var reg 1 ) alu_reg_enable $end
$var reg 1 * alu_reg_mux_select $end
$var reg 1 + clk $end
$var reg 8 , counter [7:0] $end
$var reg 4 - imm_src [3:0] $end
$var reg 2 . instr_mode [1:0] $end
$var reg 1 / ir_reg_enable $end
$var reg 1 0 mem_enable $end
$var reg 1 1 mem_reg_enable $end
$var reg 1 2 mem_write_enable $end
$var reg 1 3 memsel_mux_select $end
$var reg 8 4 nstate [7:0] $end
$var reg 1 5 old_pc_enable $end
$var reg 2 6 opsel1_select [1:0] $end
$var reg 2 7 opsel2_select [1:0] $end
$var reg 1 8 pc_enable $end
$var reg 2 9 regfile_mux_select [1:0] $end
$var reg 1 : reset $end
$var reg 1 ; rf_we $end
$var reg 8 < state [7:0] $end
$scope module uut $end
$var wire 1 ) alu_reg_enable $end
$var wire 1 * alu_reg_mux_select $end
$var wire 4 = alu_sel [3:0] $end
$var wire 1 + clk $end
$var wire 4 > imm_src [3:0] $end
$var wire 2 ? instr_mode [1:0] $end
$var wire 1 / ir_reg_enable $end
$var wire 1 0 mem_enable $end
$var wire 1 1 mem_reg_enable $end
$var wire 1 2 mem_write_enable $end
$var wire 1 3 memsel_mux_select $end
$var wire 1 5 old_pc_enable $end
$var wire 2 @ opsel1_select [1:0] $end
$var wire 2 A opsel2_select [1:0] $end
$var wire 1 8 pc_enable $end
$var wire 2 B regfile_mux_select [1:0] $end
$var wire 1 : reset $end
$var wire 1 ; rf_we $end
$var wire 1 " zero $end
$var wire 32 C sign_extend_out [31:0] $end
$var wire 32 D rs2_out [31:0] $end
$var wire 32 E rs1_out [31:0] $end
$var wire 32 F rf_reg_rs2_out [31:0] $end
$var wire 32 G rf_reg_rs1_out [31:0] $end
$var wire 32 H regfile_mux_out [31:0] $end
$var wire 32 I pc_out [31:0] $end
$var wire 32 J opsel2_mux_out [31:0] $end
$var wire 32 K opsel1_mux_out [31:0] $end
$var wire 32 L old_pc_out [31:0] $end
$var wire 32 M memsel_mux_out [31:0] $end
$var wire 32 N mem_reg_out [31:0] $end
$var wire 1 $ mem_op_r $end
$var wire 32 O mem_data_out [31:0] $end
$var wire 32 P ir_reg_out [31:0] $end
$var wire 32 Q alu_reg_out [31:0] $end
$var wire 32 R alu_reg_mux_out [31:0] $end
$var wire 32 S alu_out [31:0] $end
$var reg 1 T global_we $end
$scope module alu1 $end
$var wire 4 U alu_sel [3:0] $end
$var wire 32 V op1 [31:0] $end
$var wire 32 W op2 [31:0] $end
$var wire 1 " zero $end
$var wire 32 X res [31:0] $end
$var reg 1 Y sign $end
$upscope $end
$scope module alu_reg $end
$var wire 1 + clk $end
$var wire 32 Z in [31:0] $end
$var wire 1 : reset $end
$var wire 1 ) we $end
$var wire 32 [ out [31:0] $end
$var reg 32 \ register [31:0] $end
$upscope $end
$scope module ir_reg $end
$var wire 1 + clk $end
$var wire 1 : reset $end
$var wire 1 / we $end
$var wire 32 ] out [31:0] $end
$var wire 32 ^ in [31:0] $end
$var reg 32 _ register [31:0] $end
$upscope $end
$scope module mem_read_reg $end
$var wire 1 + clk $end
$var wire 1 : reset $end
$var wire 1 1 we $end
$var wire 32 ` out [31:0] $end
$var wire 32 a in [31:0] $end
$var reg 32 b register [31:0] $end
$upscope $end
$scope module memory $end
$var wire 24 c addr [23:0] $end
$var wire 1 + clk $end
$var wire 32 d data_out [31:0] $end
$var wire 1 0 enable $end
$var wire 2 e instr_mode [1:0] $end
$var wire 1 $ op_r $end
$var wire 1 2 we $end
$var wire 32 f data_in [31:0] $end
$var reg 24 g addr_reg [23:0] $end
$var reg 4 h counter [3:0] $end
$var reg 32 i d_out [31:0] $end
$var reg 1 j op_rr $end
$var reg 1 k state $end
$upscope $end
$scope module old_pc $end
$var wire 1 + clk $end
$var wire 1 : reset $end
$var wire 1 5 we $end
$var wire 32 l out [31:0] $end
$var wire 32 m in [31:0] $end
$var reg 32 n register [31:0] $end
$upscope $end
$scope module pc $end
$var wire 1 + clk $end
$var wire 32 o in [31:0] $end
$var wire 1 : reset $end
$var wire 1 8 we $end
$var wire 32 p out [31:0] $end
$var reg 32 q register [31:0] $end
$upscope $end
$scope module regfile $end
$var wire 5 r a1 [4:0] $end
$var wire 5 s a2 [4:0] $end
$var wire 5 t a3 [4:0] $end
$var wire 1 + clk $end
$var wire 32 u rd1 [31:0] $end
$var wire 32 v rd2 [31:0] $end
$var wire 1 : reset $end
$var wire 32 w wd3 [31:0] $end
$var wire 1 ; we $end
$var integer 32 x i [31:0] $end
$upscope $end
$scope module rf_reg1 $end
$var wire 1 + clk $end
$var wire 32 y in [31:0] $end
$var wire 1 : reset $end
$var wire 1 T we $end
$var wire 32 z out [31:0] $end
$var reg 32 { register [31:0] $end
$upscope $end
$scope module rf_reg2 $end
$var wire 1 + clk $end
$var wire 32 | in [31:0] $end
$var wire 1 : reset $end
$var wire 1 T we $end
$var wire 32 } out [31:0] $end
$var reg 32 ~ register [31:0] $end
$upscope $end
$scope module sign_extend $end
$var wire 4 !" imm_src [3:0] $end
$var wire 32 "" inp [31:0] $end
$var wire 32 #" mem_inp [31:0] $end
$var wire 32 $" out [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 $"
b0 #"
b0 ""
b0 !"
b0 ~
b0 }
b0 |
b0 {
b0 z
b0 y
b100000 x
b0 w
b0 v
b0 u
b0 t
b0 s
b0 r
b0 q
b0 p
b0 o
b0 n
b0 m
b0 l
0k
0j
b0 i
b0 h
b0 g
b0 f
b0 e
b0 d
b0 c
b0 b
b0 a
b0 `
b0 _
b0 ^
b0 ]
b0 \
b0 [
b0 Z
0Y
b0 X
b0 W
b0 V
b0 U
1T
b0 S
b0 R
b0 Q
b0 P
b0 O
b0 N
b0 M
b0 L
b0 K
b0 J
b0 I
b0 H
b0 G
b0 F
b0 E
b0 D
b0 C
b0 B
b0 A
b0 @
b0 ?
b0 >
b0 =
b1 <
0;
1:
b0 9
08
b0 7
b0 6
05
b10 4
03
02
01
00
0/
b0 .
b0 -
b0 ,
0+
0*
0)
b0 (
b0 '
b0 &
b0 %
0$
b0 #
1"
1!
$end
#100
0:
#1000
0!
1+
#2000
1/
b10 <
0"
b100 R
b100 o
b100 S
b100 X
b100 Z
b100 J
b100 W
15
18
1*
b1 7
b1 A
b1 6
b1 @
10
1!
0+
#3000
1"
b1000 R
b1000 o
b1000 S
b1000 X
b1000 Z
b100 K
b100 V
b100 c
b100 M
b100 I
b100 m
b100 p
b100 q
1k
0!
1+
#4000
1"
b0 R
b0 o
b0 J
b0 W
b0 S
b0 X
b0 Z
b0 K
b0 V
05
08
0*
b0 7
b0 A
b0 6
b0 @
00
1!
0+
#5000
b1 h
0!
1+
#6000
1!
0+
#7000
b10 h
0!
1+
#8000
1!
0+
#9000
b11 h
0!
1+
#10000
1!
0+
#11000
b10000001000001000010011 H
b10000001000001000010011 w
b11 4
b10000001000001000010011 O
b10000001000001000010011 ^
b10000001000001000010011 a
b10000001000001000010011 d
b10000001000001000010011 i
1$
1j
b100 h
0!
1+
#12000
b11 <
1!
0+
#13000
0"
b100 S
b100 X
b100 Z
b100 J
b100 W
b100 C
b100 $"
b10011 4
b100 t
b100 s
b1 r
b10011 #
b10000001000001000010011 %
b10000001000001000010011 P
b10000001000001000010011 ]
b10000001000001000010011 _
b10000001000001000010011 ""
0$
0j
0k
b0 h
0!
1+
#14000
b0 4
b10011 <
0/
1!
0+
#15000
0!
1+
#16000
b1 4
b0 <
b100 R
b100 o
b100 H
b100 w
1;
b1 9
b1 B
1*
1!
0+
#17000
b100 D
b100 v
b100 |
0!
1+
#18000
b10 4
b1 <
0;
1!
0+
#19000
b100 F
b100 f
b100 }
b100 ~
0!
1+
#20000
1/
b10 <
b1000 H
b1000 w
1"
b1000 R
b1000 o
b1000 S
b1000 X
b1000 Z
b100 K
b100 V
15
18
b1 7
b1 A
b1 6
b1 @
10
1!
0+
#21000
b1100 H
b1100 w
0"
b1100 R
b1100 o
b1100 S
b1100 X
b1100 Z
b1000 K
b1000 V
b1000 c
b1000 M
b100 L
b100 l
b100 n
b1000 I
b1000 m
b1000 p
b1000 q
1k
b100 g
0!
1+
#22000
b0 H
b0 w
b0 R
b0 o
b100 S
b100 X
b100 Z
b0 K
b0 V
05
08
0*
b0 7
b0 A
b0 6
b0 @
00
1!
0+
#23000
b1 h
0!
1+
#24000
1!
0+
#25000
b10 h
0!
1+
#26000
1!
0+
#27000
b11 h
0!
1+
#28000
1!
0+
#29000
b11 4
bx O
bx ^
bx a
bx d
bx i
1$
1j
b100 h
0!
1+
#30000
b10011 4
b11 <
1!
0+
#31000
x"
bx J
bx W
bx S
bx X
bx Z
b0xx (
b0xx =
b0xx U
bx C
bx $"
bx t
bx D
bx v
bx |
bx s
bx E
bx u
bx y
bx r
b0xxxxxxx &
bx '
bx #
bx %
bx P
bx ]
bx _
bx ""
0$
0j
0k
b0 h
0!
1+
#32000
b0 4
b10011 <
0/
1!
0+
#33000
bx K
bx V
bx F
bx f
bx }
bx ~
bx G
bx z
bx {
0!
1+
#34000
b1 4
b0 <
bx H
bx w
bx R
bx o
1;
1*
1!
0+
#35000
0!
1+
#36000
b10 4
b1 <
0;
1!
0+
#37000
0!
1+
#38000
1/
b10 <
b0x000xx00 H
b0x000xx00 w
b0x000xx00 R
b0x000xx00 o
b0x000xx00 S
b0x000xx00 X
b0x000xx00 Z
0"
b100 J
b100 W
b1000 K
b1000 V
15
18
b1 7
b1 A
b1 6
b1 @
10
1!
0+
#39000
bx H
bx w
x"
bx R
bx o
bx S
bx X
bx Z
b0x000xx00 K
b0x000xx00 V
b0x000xx00 c
b0x000xx00 M
b0x000xx00 I
b0x000xx00 m
b0x000xx00 p
b0x000xx00 q
b1000 L
b1000 l
b1000 n
1k
b1000 g
0!
1+
#40000
b0 H
b0 w
b0 R
b0 o
bx J
bx W
bx K
bx V
05
08
0*
b0 7
b0 A
b0 6
b0 @
00
1!
0+
#41000
b1 h
0!
1+
#42000
1!
0+
#43000
b10 h
0!
1+
#44000
1!
0+
#45000
b11 h
0!
1+
#46000
1!
0+
#47000
b11 4
1$
1j
b100 h
0!
1+
#48000
b11 <
1!
0+
#49000
0$
0j
0k
b0 h
0!
1+
#50000
0/
1!
0+
#51000
0!
1+
#52000
1!
0+
#53000
0!
1+
#54000
1!
0+
#55000
0!
1+
#56000
1!
0+
#57000
0!
1+
#58000
1!
0+
#59000
0!
1+
#60000
1!
0+
#61000
0!
1+
#62000
1!
0+
#63000
0!
1+
#64000
1!
0+
#65000
0!
1+
#66000
1!
0+
#67000
0!
1+
#68000
1!
0+
#69000
0!
1+
#70000
1!
0+
#71000
0!
1+
#72000
1!
0+
#73000
0!
1+
#74000
1!
0+
#75000
0!
1+
#76000
1!
0+
#77000
0!
1+
#78000
1!
0+
#79000
0!
1+
#80000
1!
0+
#81000
0!
1+
#82000
1!
0+
#83000
0!
1+
#84000
1!
0+
#85000
0!
1+
#86000
1!
0+
#87000
0!
1+
#88000
1!
0+
#89000
0!
1+
#90000
1!
0+
#91000
0!
1+
#92000
1!
0+
#93000
0!
1+
#94000
1!
0+
#95000
0!
1+
#96000
1!
0+
#97000
0!
1+
#98000
1!
0+
#99000
0!
1+
#100000
1!
0+
