$date
	Sat Aug  2 13:01:08 2025
$end
$version
	Icarus Verilog
$end
$timescale
	10ps
$end
$scope module main $end
$var wire 1 ! nclk $end
$var wire 1 " zero $end
$var wire 1 # unegative $end
$var wire 7 $ opcode [6:0] $end
$var wire 1 % negative $end
$var wire 1 & mem_op_r $end
$var wire 32 ' ir_reg_out [31:0] $end
$var wire 8 ( func7 [31:24] $end
$var wire 3 ) func3 [14:12] $end
$var wire 4 * alu_sel [3:0] $end
$var reg 1 + alu_reg_enable $end
$var reg 1 , alu_reg_mux_select $end
$var reg 1 - clk $end
$var reg 8 . counter [7:0] $end
$var reg 4 / imm_src [3:0] $end
$var reg 2 0 instr_mode [1:0] $end
$var reg 1 1 ir_reg_enable $end
$var reg 1 2 mem_enable $end
$var reg 1 3 mem_reg_enable $end
$var reg 1 4 mem_write_enable $end
$var reg 1 5 memsel_mux_select $end
$var reg 8 6 nstate [7:0] $end
$var reg 1 7 old_pc_enable $end
$var reg 2 8 opsel1_select [1:0] $end
$var reg 2 9 opsel2_select [1:0] $end
$var reg 1 : pc_enable $end
$var reg 2 ; regfile_mux_select [1:0] $end
$var reg 1 < reset $end
$var reg 1 = rf_we $end
$var reg 8 > state [7:0] $end
$scope module uut $end
$var wire 1 + alu_reg_enable $end
$var wire 1 , alu_reg_mux_select $end
$var wire 4 ? alu_sel [3:0] $end
$var wire 1 - clk $end
$var wire 4 @ imm_src [3:0] $end
$var wire 2 A instr_mode [1:0] $end
$var wire 1 1 ir_reg_enable $end
$var wire 1 2 mem_enable $end
$var wire 1 3 mem_reg_enable $end
$var wire 1 4 mem_write_enable $end
$var wire 1 5 memsel_mux_select $end
$var wire 1 7 old_pc_enable $end
$var wire 2 B opsel1_select [1:0] $end
$var wire 2 C opsel2_select [1:0] $end
$var wire 1 : pc_enable $end
$var wire 2 D regfile_mux_select [1:0] $end
$var wire 1 < reset $end
$var wire 1 = rf_we $end
$var wire 1 " zero $end
$var wire 1 # unegative $end
$var wire 32 E sign_extend_out [31:0] $end
$var wire 32 F rs2_out [31:0] $end
$var wire 32 G rs1_out [31:0] $end
$var wire 32 H rf_reg_rs2_out [31:0] $end
$var wire 32 I rf_reg_rs1_out [31:0] $end
$var wire 32 J regfile_mux_out [31:0] $end
$var wire 32 K pc_out [31:0] $end
$var wire 32 L opsel2_mux_out [31:0] $end
$var wire 32 M opsel1_mux_out [31:0] $end
$var wire 32 N old_pc_out [31:0] $end
$var wire 1 % negative $end
$var wire 32 O memsel_mux_out [31:0] $end
$var wire 32 P mem_reg_out [31:0] $end
$var wire 1 & mem_op_r $end
$var wire 32 Q mem_data_out [31:0] $end
$var wire 32 R ir_reg_out [31:0] $end
$var wire 32 S alu_reg_out [31:0] $end
$var wire 32 T alu_reg_mux_out [31:0] $end
$var wire 32 U alu_out [31:0] $end
$var reg 1 V global_we $end
$scope module alu1 $end
$var wire 4 W alu_sel [3:0] $end
$var wire 32 X op1 [31:0] $end
$var wire 32 Y op2 [31:0] $end
$var wire 1 " zero $end
$var wire 1 # unegative $end
$var wire 32 Z res [31:0] $end
$var wire 1 % negative $end
$upscope $end
$scope module alu_reg $end
$var wire 1 - clk $end
$var wire 32 [ in [31:0] $end
$var wire 1 < reset $end
$var wire 1 + we $end
$var wire 32 \ out [31:0] $end
$var reg 32 ] register [31:0] $end
$upscope $end
$scope module ir_reg $end
$var wire 1 - clk $end
$var wire 1 < reset $end
$var wire 1 1 we $end
$var wire 32 ^ out [31:0] $end
$var wire 32 _ in [31:0] $end
$var reg 32 ` register [31:0] $end
$upscope $end
$scope module mem_read_reg $end
$var wire 1 - clk $end
$var wire 1 < reset $end
$var wire 1 3 we $end
$var wire 32 a out [31:0] $end
$var wire 32 b in [31:0] $end
$var reg 32 c register [31:0] $end
$upscope $end
$scope module memory $end
$var wire 24 d addr [23:0] $end
$var wire 1 - clk $end
$var wire 32 e data_out [31:0] $end
$var wire 1 2 enable $end
$var wire 2 f instr_mode [1:0] $end
$var wire 1 & op_r $end
$var wire 1 4 we $end
$var wire 32 g data_in [31:0] $end
$var reg 24 h addr_reg [23:0] $end
$var reg 4 i counter [3:0] $end
$var reg 32 j d_out [31:0] $end
$var reg 1 k op_rr $end
$var reg 1 l state $end
$upscope $end
$scope module old_pc $end
$var wire 1 - clk $end
$var wire 1 < reset $end
$var wire 1 7 we $end
$var wire 32 m out [31:0] $end
$var wire 32 n in [31:0] $end
$var reg 32 o register [31:0] $end
$upscope $end
$scope module pc $end
$var wire 1 - clk $end
$var wire 32 p in [31:0] $end
$var wire 1 < reset $end
$var wire 1 : we $end
$var wire 32 q out [31:0] $end
$var reg 32 r register [31:0] $end
$upscope $end
$scope module regfile $end
$var wire 5 s a1 [4:0] $end
$var wire 5 t a2 [4:0] $end
$var wire 5 u a3 [4:0] $end
$var wire 1 - clk $end
$var wire 32 v rd1 [31:0] $end
$var wire 32 w rd2 [31:0] $end
$var wire 1 < reset $end
$var wire 32 x wd3 [31:0] $end
$var wire 1 = we $end
$var integer 32 y i [31:0] $end
$upscope $end
$scope module rf_reg1 $end
$var wire 1 - clk $end
$var wire 32 z in [31:0] $end
$var wire 1 < reset $end
$var wire 1 V we $end
$var wire 32 { out [31:0] $end
$var reg 32 | register [31:0] $end
$upscope $end
$scope module rf_reg2 $end
$var wire 1 - clk $end
$var wire 32 } in [31:0] $end
$var wire 1 < reset $end
$var wire 1 V we $end
$var wire 32 ~ out [31:0] $end
$var reg 32 !" register [31:0] $end
$upscope $end
$scope module sign_extend $end
$var wire 4 "" imm_src [3:0] $end
$var wire 32 #" inp [31:0] $end
$var wire 32 $" mem_inp [31:0] $end
$var wire 32 %" out [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 %"
b0 $"
b0 #"
b0 ""
b0 !"
b0 ~
b0 }
b0 |
b0 {
b0 z
b100000 y
b0 x
b0 w
b0 v
b0 u
b0 t
b0 s
b0 r
b0 q
b0 p
b0 o
b0 n
b0 m
0l
0k
b0 j
b0 i
b0 h
b0 g
b0 f
b0 e
b0 d
b0 c
b0 b
b0 a
b0 `
b0 _
b0 ^
b0 ]
b0 \
b0 [
b0 Z
b0 Y
b0 X
b0 W
1V
b0 U
b0 T
b0 S
b0 R
b0 Q
b0 P
b0 O
b0 N
b0 M
b0 L
b0 K
b0 J
b0 I
b0 H
b0 G
b0 F
b0 E
b0 D
b0 C
b0 B
b0 A
b0 @
b0 ?
b1 >
0=
1<
b0 ;
0:
b0 9
b0 8
07
b10 6
05
04
03
02
01
b0 0
b0 /
b0 .
0-
0,
0+
b0 *
b0 )
b0 (
b0 '
0&
0%
b0 $
0#
1"
1!
$end
#100
0<
#1000
0!
1-
#2000
11
b10 >
1%
0"
1#
b100 T
b100 p
b100 U
b100 Z
b100 [
b100 L
b100 Y
17
1:
1,
b1 9
b1 C
b1 8
b1 B
12
1!
0-
#3000
0%
1"
0#
b1000 T
b1000 p
b1000 U
b1000 Z
b1000 [
b100 M
b100 X
b100 d
b100 O
b100 K
b100 n
b100 q
b100 r
1l
0!
1-
#4000
0%
1"
0#
b0 T
b0 p
b0 L
b0 Y
b0 U
b0 Z
b0 [
b0 M
b0 X
07
0:
0,
b0 9
b0 C
b0 8
b0 B
02
1!
0-
#5000
b1 i
0!
1-
#6000
1!
0-
#7000
b10 i
0!
1-
#8000
1!
0-
#9000
b11 i
0!
1-
#10000
1!
0-
#11000
b1000001110100001100011 J
b1000001110100001100011 x
b11 6
b1000001110100001100011 Q
b1000001110100001100011 _
b1000001110100001100011 b
b1000001110100001100011 e
b1000001110100001100011 j
1&
1k
b100 i
0!
1-
#12000
b11 >
1!
0-
#13000
1%
0"
1#
b10000 U
b10000 Z
b10000 [
b10000 L
b10000 Y
b10000 E
b10000 %"
b10 /
b10 @
b10 ""
b1010 6
b10000 u
b1101 F
b1101 w
b1101 }
b10 t
b1100 G
b1100 v
b1100 z
b1 s
b110 )
b1100011 $
b1000001110100001100011 '
b1000001110100001100011 R
b1000001110100001100011 ^
b1000001110100001100011 `
b1000001110100001100011 #"
0&
0k
0l
b0 i
0!
1-
#14000
b1011 6
b1010 >
01
1!
0-
#15000
b11100 U
b11100 Z
b11100 [
b1100 M
b1100 X
b1100 I
b1100 {
b1100 |
b1101 H
b1101 g
b1101 ~
b1101 !"
0!
1-
#16000
b0 6
b1011 >
b11001 U
b11001 Z
b11001 [
b1101 L
b1101 Y
b10 9
b10 C
1!
0-
#17000
0!
1-
#18000
b1 6
b0 >
1%
0"
1#
b10000 U
b10000 Z
b10000 [
b10000 T
b10000 p
b10000 L
b10000 Y
b0 M
b0 X
1:
b0 9
b0 C
b10 8
b10 B
1,
1!
0-
#19000
b10000 d
b10000 O
b10000 K
b10000 n
b10000 q
b10000 r
0!
1-
#20000
b10 6
b1 >
1!
0-
#21000
0!
1-
#22000
11
b10 >
0%
0#
b10100 T
b10100 p
b10100 U
b10100 Z
b10100 [
b100 L
b100 Y
b10000 M
b10000 X
17
b1 9
b1 C
b1 8
b1 B
12
1!
0-
#23000
b11000 T
b11000 p
b11000 U
b11000 Z
b11000 [
b10100 M
b10100 X
b10100 d
b10100 O
b10100 K
b10100 n
b10100 q
b10100 r
b10000 N
b10000 m
b10000 o
1l
b10000 h
0!
1-
#24000
b0 T
b0 p
b10 L
b10 Y
b1110 U
b1110 Z
b1110 [
b1100 M
b1100 X
b10 E
b10 %"
07
0:
0,
b0 9
b0 C
b0 8
b0 B
b0 /
b0 @
b0 ""
02
1!
0-
#25000
b1 i
0!
1-
#26000
1!
0-
#27000
b10 i
0!
1-
#28000
1!
0-
#29000
b11 i
0!
1-
#30000
1!
0-
#31000
bx J
bx x
b11 6
bx Q
bx _
bx b
bx e
bx j
1&
1k
b100 i
0!
1-
#32000
1%
1#
b11100 U
b11100 Z
b11100 [
b10000 L
b10000 Y
b10000 E
b10000 %"
b10 /
b10 @
b10 ""
b1010 6
b11 >
1!
0-
#33000
x%
x"
x#
bx0 L
bx0 Y
bx0 E
bx0 %"
bx U
bx Z
bx [
bx *
bx ?
bx W
bx u
bx F
bx w
bx }
bx t
bx G
bx v
bx z
bx s
b0xxxxxxx (
bx )
bx $
bx '
bx R
bx ^
bx `
bx #"
0&
0k
0l
b0 i
0!
1-
#34000
b1011 6
b1010 >
01
1!
0-
#35000
bx M
bx X
bx I
bx {
bx |
bx H
bx g
bx ~
bx !"
0!
1-
#36000
b0 6
b1011 >
bx L
bx Y
b10 9
b10 C
1!
0-
#37000
0!
1-
#38000
b1 6
b0 >
bx T
bx p
1,
1!
0-
#39000
0!
1-
#40000
b10 6
b1 >
1!
0-
#41000
0!
1-
#42000
11
b10 >
b0x0x0xxx0x T
b0x0x0xxx0x p
b0x0x0xxx0x U
b0x0x0xxx0x Z
b0x0x0xxx0x [
0%
0"
0#
b100 L
b100 Y
b10100 M
b10100 X
17
1:
b1 9
b1 C
b1 8
b1 B
12
1!
0-
#43000
x%
x"
x#
bx T
bx p
bx U
bx Z
bx [
b0x0x0xxx0x M
b0x0x0xxx0x X
b0x0x0xxx0x d
b0x0x0xxx0x O
b0x0x0xxx0x K
b0x0x0xxx0x n
b0x0x0xxx0x q
b0x0x0xxx0x r
b10100 N
b10100 m
b10100 o
1l
b10100 h
0!
1-
#44000
b0 T
b0 p
bx L
bx Y
bx M
bx X
bx E
bx %"
07
0:
0,
b0 9
b0 C
b0 8
b0 B
b0 /
b0 @
b0 ""
02
1!
0-
#45000
b1 i
0!
1-
#46000
1!
0-
#47000
b10 i
0!
1-
#48000
1!
0-
#49000
b11 i
0!
1-
#50000
1!
0-
#51000
b11 6
1&
1k
b100 i
0!
1-
#52000
b11 >
1!
0-
#53000
0&
0k
0l
b0 i
0!
1-
#54000
01
1!
0-
#55000
0!
1-
#56000
1!
0-
#57000
0!
1-
#58000
1!
0-
#59000
0!
1-
#60000
1!
0-
#61000
0!
1-
#62000
1!
0-
#63000
0!
1-
#64000
1!
0-
#65000
0!
1-
#66000
1!
0-
#67000
0!
1-
#68000
1!
0-
#69000
0!
1-
#70000
1!
0-
#71000
0!
1-
#72000
1!
0-
#73000
0!
1-
#74000
1!
0-
#75000
0!
1-
#76000
1!
0-
#77000
0!
1-
#78000
1!
0-
#79000
0!
1-
#80000
1!
0-
#81000
0!
1-
#82000
1!
0-
#83000
0!
1-
#84000
1!
0-
#85000
0!
1-
#86000
1!
0-
#87000
0!
1-
#88000
1!
0-
#89000
0!
1-
#90000
1!
0-
#91000
0!
1-
#92000
1!
0-
#93000
0!
1-
#94000
1!
0-
#95000
0!
1-
#96000
1!
0-
#97000
0!
1-
#98000
1!
0-
#99000
0!
1-
#100000
1!
0-
